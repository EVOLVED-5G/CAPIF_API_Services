worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /tmp/nginx.pid;

events {
    worker_connections   1024;
}

http {
        map  $ssl_client_s_dn  $ssl_client_s_dn_cn {
          default "";
          ~(^|,)CN=(?<CN>[^,]+) $CN;
        }
        map "$request_method:$uri:$ssl_client_s_dn_cn" $invoker_error_message {
          default 'SUCCESS';
          "~*(PUT|DELETE):.*:(?!(invoker|superadmin))(.*)"   '{"status":401, "title":"Unauthorized" ,"detail":"Role not authorized for this API route", "cause":"User role must be invoker"}';
        }
        map "$request_method:$uri:$ssl_client_s_dn_cn" $provider_error_message {
          default 'SUCCESS';
          "~*(PUT|DELETE|PATCH):.*:(?!(amf|superadmin))(.*)"   '{"status":401, "title":"Unauthorized" ,"detail":"Role not authorized for this API route", "cause":"User role must be amf"}';
        }
        map "$request_method:$uri:$ssl_client_s_dn_cn" $publish_error_message {
          default 'SUCCESS';
          "~*.*:.*:(?!(apf|ccf|superadmin))(.*)"           '{"status":401, "title":"Unauthorized" ,"detail":"User not authorized", "cause":"Certificate not authorized"}';
        }
        map "$request_method:$uri:$ssl_client_s_dn_cn" $discover_error_message {
          default 'SUCCESS';
          "~*.*:.*:(?!(invoker|ccf|superadmin))(.*)"           '{"status":401, "title":"Unauthorized" ,"detail":"User not authorized", "cause":"Certificate not authorized"}';
        }
        map "$request_method:$uri:$ssl_client_s_dn_cn" $security_error_message {
          default 'SUCCESS';
          "~*DELETE:.*:(?!(aef|superadmin))(.*)"           '{"status":401, "title":"Unauthorized" ,"detail":"Role not authorized for this API route", "cause":"User role must be aef"}';
          "~*PUT:.*:(?!(invoker|superadmin))(.*)"          '{"status":401, "title":"Unauthorized" ,"detail":"Role not authorized for this API route", "cause":"User role must be invoker"}';
          "~*GET:.*:(?!(aef|superadmin))(.*)"              '{"status":401, "title":"Unauthorized" ,"detail":"Role not authorized for this API route", "cause":"User role must be aef"}';
          "~*POST:.*/update:(?!(invoker|superadmin))(.*)"  '{"status":401, "title":"Unauthorized" ,"detail":"Role not authorized for this API route", "cause":"User role must be invoker"}';
          "~*POST:.*/delete:(?!(aef|superadmin))(.*)"      '{"status":401, "title":"Unauthorized" ,"detail":"Role not authorized for this API route", "cause":"User role must be aef"}';
          "~*POST:.*/token:(?!(invoker|superadmin))(.*)"   '{"error":"unauthorized_client", "error_description":"Role not authorized for this API route"}';
        }
        map "$request_method:$uri:$ssl_client_s_dn_cn" $events_error_message {
          default 'SUCCESS';
          "~*.*:.*:ccf"           '{"status":401, "title":"Unauthorized" ,"detail":"User not authorized", "cause":"Certificate not authorized"}';
        }

        server {
              listen      443 ssl;
              # server_name capifcore;
              # server_name openshift.evolved-5g.eu;

              ssl_certificate      /etc/nginx/certs/server.crt;
              ssl_certificate_key  /etc/nginx/certs/server.key;
              ssl_client_certificate  /etc/nginx/certs/ca.crt;
              ssl_verify_client       optional;

              location / {
                  proxy_pass $scheme://$http_host/api-invoker-management/v1/ui/;
              }

              location /api-invoker-management {
                if ( $invoker_error_message != SUCCESS ) {
                  add_header Content-Type 'application/problem+json';
                  return 401 $invoker_error_message;
                }
                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://api-invoker-management:8080;
              }

              location /api-provider-management {
                if ( $provider_error_message != SUCCESS ) {
                  add_header Content-Type 'application/problem+json';
                  return 401 $provider_error_message;
                }
                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://api-provider-management:8080;
              }

              location /service-apis {
                if ($ssl_client_verify != SUCCESS) {
                    return 403;
                }
                if ( $discover_error_message != SUCCESS ) {
                  add_header Content-Type 'application/problem+json';
                  return 401 $discover_error_message;
                }
                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://service-apis:8080;
              }

              location /published-apis {
                if ($ssl_client_verify != SUCCESS) {
                    return 403;
                }
                if ( $publish_error_message != SUCCESS ) {
                  add_header Content-Type 'application/problem+json';
                  return 401 $publish_error_message;
                }
                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://published-apis:8080;
              }

              location /api-invocation-logs {
                if ($ssl_client_verify != SUCCESS) {
                    return 403;
                }
                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://api-invocation-logs:8080;
              }

              location /logs {
                if ($ssl_client_verify != SUCCESS) {
                    return 403;
                }
                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://logs:8080;
              }

              location /capif-security {
                if ($ssl_client_verify != SUCCESS) {
                    return 403;
                }
                if ( $security_error_message != SUCCESS ) {
                  add_header Content-Type 'application/problem+json';
                  return 401 $security_error_message;
                }

                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://capif-security:8080;
              }

              location /capif-events {
                if ($ssl_client_verify != SUCCESS) {
                    return 403;
                }
                if ( $events_error_message != SUCCESS ) {
                  add_header Content-Type 'application/problem+json';
                  return 401 $events_error_message;
                }
                proxy_set_header X-SSL-Client-Cert $ssl_client_cert;
                proxy_pass http://capif-events:8080;
              }
        }
}

daemon off;