version: '3.7'

services:
#  aef-security:
#    build: TS29222_AEF_Security_API/.
#    expose:
#      - "8080"
#    image: dockerhub.hi.inet/evolved-5g/aef/security_api:latest
  mosquitto:
    build: ./mosquitto
    ports: 
      - "1883:1883"
  aef-security:
    build: TS29222_AEF_Security_API/.
    expose:
      - "8080"
    image: dockerhub.hi.inet/evolved-5g/aef/security_api:latest
  api-invoker-management:
    build:
      context: ./TS29222_CAPIF_API_Invoker_Management_API
    expose:
      - "8080"
    volumes:
      - ./TS29222_CAPIF_API_Invoker_Management_API:/usr/src/app
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/capif/api_invoker_management_api:latest
  api-provider-management:
    build: TS29222_CAPIF_API_Provider_Management_API/.
    expose:
      - "8080"
    image: dockerhub.hi.inet/evolved-5g/capif/api_provider_management_api:latest
#  access-control-policy:
#    build: TS29222_CAPIF_Access_Control_Policy_API/.
#    expose:
#      - "8080"
#    image: dockerhub.hi.inet/evolved-5g/capif/access_control_policy_api:latest
  logs:
    build:
      context: ./TS29222_CAPIF_Auditing_API
    expose:
      - "8080"
    volumes:
      - ./TS29222_CAPIF_Auditing_API:/usr/src/app
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/capif/auditing_api:latest
    depends_on:
      - elasticsearch
  service-apis:
    build:
      context: ./TS29222_CAPIF_Discover_Service_API
    expose:
      - "8080"
    volumes:
      - ./TS29222_CAPIF_Discover_Service_API:/usr/src/app
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/capif/discover_service_api:latest
  capif-events:
    build: TS29222_CAPIF_Events_API/.
    expose:
      - "8080"
    image: dockerhub.hi.inet/evolved-5g/capif/events_api:latest
    depends_on:
      - mosquitto
  api-invocation-logs:
    build:
      context: ./TS29222_CAPIF_Logging_API_Invocation_API
    expose:
      - "8080"
    volumes:
      - ./TS29222_CAPIF_Logging_API_Invocation_API:/usr/src/app
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/capif/api_invocation_logs_api:latest
    depends_on:
      - elasticsearch
  published-apis:
    build: TS29222_CAPIF_Publish_Service_API/.
    expose:
      - "8080"
    volumes:
      - ./TS29222_CAPIF_Publish_Service_API:/usr/src/app
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/capif/publish_service_api:latest
    depends_on:
      - mosquitto
  capif-routing-info:
    build: TS29222_CAPIF_Routing_Info_API/.
    expose:
      - "8080"
    image: dockerhub.hi.inet/evolved-5g/capif/routing_info_api:latest
  capif-security:
    build: TS29222_CAPIF_Security_API/.
    expose:
      - "8080"
    volumes:
      - ./TS29222_CAPIF_Security_API:/usr/src/app
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/capif/security_api:latest
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
    extra_hosts:
      - host.docker.internal:host-gateway
  easy-rsa:
    build:
      context: ./easy_rsa
    expose:
      - "8080"
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/easy-rsa:latest
  jwtauth:
    build:
      context: ./jwt_auth
    expose:
      - "8080"
    volumes:
      - ./jwt_auth:/usr/src/app
    restart: unless-stopped
    image: dockerhub.hi.inet/evolved-5g/jwtauth:latest
    depends_on:
      - easy-rsa
  mongo:
    image: mongo:5.0
    logging:
      driver: 'none'
    restart: unless-stopped
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    logging:
      driver: 'none'
    restart: unless-stopped
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo
  nginx:
    build:
      context: ./nginx
    ports:
      - "8080:8080"
      - "443:443"
    image: dockerhub.hi.inet/evolved-5g/capif/nginx:latest
    environment:
      - CAPIF_HOSTNAME=${CAPIF_HOSTNAME}
    hostname: ${CAPIF_HOSTNAME}
    volumes:
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - api-invoker-management
      - easy-rsa
#      - aef-security
#      - api-invoker-management
      - api-provider-management
#      - access-control-policy
      - service-apis
      - api-invocation-logs
      - published-apis
#      - capif-routing-info
      - capif-security
      - capif-events
      - logs
  setup:
    build:
      context: ./docker-elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
  elasticsearch:
    build:
      context: ./docker-elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./docker-elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - ./docker-elk/elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
  logstash:
    build:
      context: ./docker-elk/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./docker-elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker-elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
  kibana:
    build:
      context: ./docker-elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./docker-elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      # Fleet plugin
      KIBANA_FLEET_SETUP: '1'
    depends_on:
      - elasticsearch

#networks:
#  elk:
#    driver: bridge

volumes:
  setup:
  elasticsearch: