# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from capif_events.models.notification_flag import NotificationFlag
from capif_events.models.notification_method import NotificationMethod
from capif_events.models.partitioning_criteria import PartitioningCriteria


class ReportingInformation(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    ReportingInformation - a model defined in OpenAPI

        imm_rep: The imm_rep of this ReportingInformation [Optional].
        notif_method: The notif_method of this ReportingInformation [Optional].
        max_report_nbr: The max_report_nbr of this ReportingInformation [Optional].
        mon_dur: The mon_dur of this ReportingInformation [Optional].
        rep_period: The rep_period of this ReportingInformation [Optional].
        samp_ratio: The samp_ratio of this ReportingInformation [Optional].
        partition_criteria: The partition_criteria of this ReportingInformation [Optional].
        grp_rep_time: The grp_rep_time of this ReportingInformation [Optional].
        notif_flag: The notif_flag of this ReportingInformation [Optional].
    """

    imm_rep: Optional[bool] = None
    notif_method: Optional[NotificationMethod] = None
    max_report_nbr: Optional[int] = None
    mon_dur: Optional[datetime] = None
    rep_period: Optional[int] = None
    samp_ratio: Optional[int] = None
    partition_criteria: Optional[List[PartitioningCriteria]] = None
    grp_rep_time: Optional[int] = None
    notif_flag: Optional[NotificationFlag] = None

    @validator("max_report_nbr")
    def max_report_nbr_min(cls, value):
        assert value >= 0
        return value

    @validator("samp_ratio")
    def samp_ratio_max(cls, value):
        assert value <= 100
        return value

    @validator("samp_ratio")
    def samp_ratio_min(cls, value):
        assert value >= 1
        return value

ReportingInformation.update_forward_refs()
