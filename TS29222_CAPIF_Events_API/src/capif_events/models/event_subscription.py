# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, validator  # noqa: F401
from capif_events.models.capif_event import CAPIFEvent
from capif_events.models.capif_event_filter import CAPIFEventFilter
from capif_events.models.reporting_information import ReportingInformation
from capif_events.models.websock_notif_config import WebsockNotifConfig


class EventSubscription(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    EventSubscription - a model defined in OpenAPI

        events: The events of this EventSubscription.
        event_filters: The event_filters of this EventSubscription [Optional].
        event_req: The event_req of this EventSubscription [Optional].
        notification_destination: The notification_destination of this EventSubscription.
        request_test_notification: The request_test_notification of this EventSubscription [Optional].
        websock_notif_config: The websock_notif_config of this EventSubscription [Optional].
        supported_features: The supported_features of this EventSubscription [Optional].
    """

    events: List[CAPIFEvent]
    event_filters: Optional[List[CAPIFEventFilter]] = None
    event_req: Optional[ReportingInformation] = None
    notification_destination: str
    request_test_notification: Optional[bool] = None
    websock_notif_config: Optional[WebsockNotifConfig] = None
    supported_features: Optional[str] = None

    @validator("supported_features")
    def supported_features_pattern(cls, value):
        assert value is not None and re.match(r"^[A-Fa-f0-9]*$", value)
        return value

EventSubscription.update_forward_refs()
